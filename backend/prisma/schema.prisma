// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Sexo {
  MASCULINO
  FEMENINO
}

enum EstadoCita {
  PROGRAMADA
  COMPLETADA
  CANCELADA
  AUSENTE
}


model Paciente {
  id              String   @id @default(cuid())
  nombres         String
  apellidos       String
  fechaNacimiento DateTime
  sexo            Sexo
  telefono        String?  @db.VarChar(30)
  email           String?  @unique
  direccion       String?
  creadoEn        DateTime @default(now())
  actualizadoEn   DateTime @updatedAt

  citas           Cita[]

  @@map("pacientes")
  @@index([apellidos])
}

model Medico {
  id              String   @id @default(cuid())
  nombres         String
  apellidos       String
  especialidad    String
  numeroColegiado String   @unique
  telefono        String?  @db.VarChar(30)
  email           String?  @unique
  creadoEn        DateTime @default(now())
  actualizadoEn   DateTime @updatedAt

  citas           Cita[]

  @@map("medicos")
  @@index([apellidos])
}

model Cita {
  id             String      @id @default(cuid())
  pacienteId     String
  medicoId       String
  programadaPara DateTime
  motivo         String?
  estado         EstadoCita  @default(PROGRAMADA)
  notas          String?
  creadaEn       DateTime    @default(now())
  actualizadaEn  DateTime    @updatedAt

  paciente       Paciente    @relation(fields: [pacienteId], references: [id], onDelete: Cascade)
  medico         Medico      @relation(fields: [medicoId],   references: [id], onDelete: Restrict)

  @@map("citas")
  @@index([pacienteId])
  @@index([medicoId])
  @@index([programadaPara])
}
